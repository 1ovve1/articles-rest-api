<?php

namespace Tests\Feature\Api\V1;

use App\Models\User;
use Illuminate\Validation\ValidationException;
use Spatie\Permission\Models\Role;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class AuthorControllerTest extends TestCase
{
    const USER_STRUCTURE = [
        'data' => [
            'id',
            'login',
            'first_name',
            'last_name',
            'patronymic ',
            'active',
            'created_at',
        ],
    ];

    const ALL_USERS_STRUCTURE = [
        'data' => [
            '*' => [
                'id',
                'login',
                'first_name',
                'last_name',
                'patronymic ',
                'active',
                'created_at',
            ],
        ],
        'links' => [
            'first',
            'last',
            'prev',
            'next'
        ],
        'meta' => [
            'current_page',
            'from',
            'last_page',
            'links',
            'path',
            'per_page',
            'to',
            'total',
        ]

    ];
    protected mixed $adminUser;
    protected mixed $moderatorUser;
    protected mixed $writerUser;


    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->adminUser = Role::findByName('admin')->users()->first();
        $this->moderatorUser = Role::findByName('moderator')->users()->first();
        $this->writerUser = Role::findByName('writer')->users()->first();
    }


    /**
     * Get authors as admin
     */
    public function testViewAllAuthors(): void
    {
        $this->get('/api/v1/authors')
            ->assertStatus(Response::HTTP_OK)
            ->assertJsonStructure(self::ALL_USERS_STRUCTURE);
    }

    public function testViewArticle(): void
    {
        $this->get('/api/v1/authors/1')
            ->assertStatus(Response::HTTP_OK)
            ->assertJsonStructure(self::USER_STRUCTURE);
    }

    public function testAuthorCreationAdmin(): void
    {
        $password = fake()->password(8);
        $payload = [
            'login' => fake()->userName(),
            'email' => fake()->email(),
            'first_name' => fake()->firstName(),
            'last_name' => fake()->lastName(),
            'patronymic' => fake()->lastName(),
            'password' => $password,
            'password_confirmation' => $password,
            'active' => true
        ];

        $response = $this->actingAs($this->adminUser)
            ->post('/api/v1/authors', $payload)
            ->assertStatus(Response::HTTP_CREATED)
            ->assertJsonStructure(self::USER_STRUCTURE);

        User::destroy($response->json('data.user.id'));
    }

    public function testAuthorCreationAdminValidation(): void
    {
        $password = fake()->password(2);
        $payload = [
            'login' => fake()->text(1000),
            'email' => fake()->userName(),
            'first_name' => fake()->firstName(),
            'last_name' => fake()->lastName(),
            'patronymic' => fake()->lastName(),
            'password' => $password,
            'password_confirmation' => $password . 'bla bla bla',
            'active' => 123
        ];

        $this->expectException(\Illuminate\Validation\ValidationException::class);

        $response = $this->actingAs($this->adminUser)
            ->post('/api/v1/authors', $payload)
            ->assertStatus(Response::HTTP_FOUND);

        User::destroyWithAuthor($response->json('data.user.id'));
    }

    public function testAuthorCreationOthers(): void
    {
        $password = fake()->password(8);
        $payload = [
            'login' => fake()->unique()->userName(),
            'email' => fake()->unique()->email(),
            'first_name' => fake()->firstName(),
            'last_name' => fake()->lastName(),
            'patronymic' => fake()->lastName(),
            'password' => $password,
            'password_confirmation' => $password,
            'active' => true
        ];

        $this->actingAs($this->writerUser)
            ->post('/api/v1/authors', $payload)
            ->assertStatus(Response::HTTP_FORBIDDEN);
    }

    public function testAuthorUpdateAdmin(): void
    {
        $userId = User::first()->id;

        $password = fake()->password(8);
        $payload = [
            'first_name' => fake()->firstName(),
            'last_name' => fake()->lastName(),
            'patronymic' => fake()->lastName(),
            'email' => fake()->email(),
            'login' => fake()->userName(),
            'active' => fake()->boolean(),
        ];

        $this->actingAs($this->adminUser)
            ->put("/api/v1/authors/{$userId}", $payload)
            ->assertStatus(Response::HTTP_ACCEPTED);

        $userArray = User::find($userId)->toArray();
        foreach ($payload as $key => $value) {
            $this->assertEquals($userArray[$key], $value);
        }

    }

    public function testAuthorUpdateOthers(): void
    {
        $password = fake()->password(8);
        $payload = [
            'name' => fake()->name(),
            'email' => fake()->email(),
            'password' => $password,
            'password_confirmation' => $password,
            'active' => true
        ];

        $this->actingAs($this->writerUser)
            ->post('/api/v1/authors', $payload)
            ->assertStatus(Response::HTTP_FORBIDDEN);
    }
}

